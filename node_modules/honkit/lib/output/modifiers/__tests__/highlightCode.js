"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio = __importStar(require("cheerio"));
const promise_1 = __importDefault(require("../../../utils/promise"));
const highlightCode_1 = __importDefault(require("../highlightCode"));
describe("highlightCode", () => {
    function doHighlight(lang, code) {
        return {
            text: `${lang || ""}$${code}`
        };
    }
    function doHighlightAsync(lang, code) {
        return (0, promise_1.default)().then(() => {
            return doHighlight(lang, code);
        });
    }
    test("should call it for normal code element", () => {
        const $ = cheerio.load("<p>This is a <code>test</code></p>", { _useHtmlParser2: true });
        return (0, highlightCode_1.default)(doHighlight, $).then(() => {
            const $code = $("code");
            expect($code.text()).toBe("$test");
        });
    });
    test("should call it for markdown code block", () => {
        const $ = cheerio.load("<pre><code class=\"lang-js\">test</code></pre>", { _useHtmlParser2: true });
        return (0, highlightCode_1.default)(doHighlight, $).then(() => {
            const $code = $("code");
            expect($code.text()).toBe("js$test");
        });
    });
    test("should call it for asciidoc code block", () => {
        const $ = cheerio.load("<pre><code class=\"language-python\">test</code></pre>", { _useHtmlParser2: true });
        return (0, highlightCode_1.default)(doHighlight, $).then(() => {
            const $code = $("code");
            expect($code.text()).toBe("python$test");
        });
    });
    test("should accept async highlighter", () => {
        const $ = cheerio.load("<pre><code class=\"language-python\">test</code></pre>", { _useHtmlParser2: true });
        return (0, highlightCode_1.default)(doHighlightAsync, $).then(() => {
            const $code = $("code");
            expect($code.text()).toBe("python$test");
        });
    });
});
