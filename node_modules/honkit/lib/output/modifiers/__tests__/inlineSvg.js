"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio = __importStar(require("cheerio"));
const tmp_1 = __importDefault(require("tmp"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const inlineSvg_1 = __importDefault(require("../inlineSvg"));
describe("inlineSvg", () => {
    let dir;
    let svgPath;
    beforeEach(() => {
        dir = tmp_1.default.dirSync();
        svgPath = path_1.default.join(dir.name, "test.svg");
    });
    test("should inline svg icons", () => {
        const svg = '<svg xmlns="http://www.w3.org/2000/svg" width="200" height="100" version="1.1"><rect width="200" height="100" stroke-width="6"/></svg>';
        const $ = cheerio.load('<img src="test.svg"/>', { _useHtmlParser2: true });
        return fs_1.default.promises
            .writeFile(svgPath, svg)
            .then(() => {
            return (0, inlineSvg_1.default)(dir.name, "index.html", $);
        })
            .then(() => {
            expect($("svg").attr("fill")).toBe("currentColor");
        });
    });
    test("should not inline svgs with style tags", () => {
        const svg = '<svg xmlns="http://www.w3.org/2000/svg" width="200" height="100" version="1.1" style="background-color:red"><rect width="200" height="100" stroke="black" stroke-width="6" fill="green"/></svg>';
        const $ = cheerio.load('<img src="test.svg"/>', { _useHtmlParser2: true });
        return fs_1.default.promises
            .writeFile(svgPath, svg)
            .then(() => {
            return (0, inlineSvg_1.default)(dir.name, "index.html", $);
        })
            .then(() => {
            expect($("svg").length).toBe(0);
        });
    });
});
