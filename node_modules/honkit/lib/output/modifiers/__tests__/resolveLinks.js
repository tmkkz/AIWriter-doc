"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const cheerio = __importStar(require("cheerio"));
const resolveLinks_1 = __importDefault(require("../resolveLinks"));
describe("resolveLinks", () => {
    function resolveFileBasic(href) {
        return `fakeDir/${href}`;
    }
    function resolveFileCustom(href) {
        if (path_1.default.extname(href) == ".md") {
            return `${href.slice(0, -3)}.html`;
        }
        return href;
    }
    describe("Absolute path", () => {
        const TEST = "<p>This is a <a href=\"/test/cool.md\"></a></p>";
        test("should resolve path starting by \"/\" in root directory", () => {
            const $ = cheerio.load(TEST, { _useHtmlParser2: true });
            return (0, resolveLinks_1.default)("hello.md", resolveFileBasic, $).then(() => {
                const link = $("a");
                expect(link.attr("href")).toBe("fakeDir/test/cool.md");
            });
        });
        test("should resolve path starting by \"/\" in child directory", () => {
            const $ = cheerio.load(TEST, { _useHtmlParser2: true });
            return (0, resolveLinks_1.default)("afolder/hello.md", resolveFileBasic, $).then(() => {
                const link = $("a");
                expect(link.attr("href")).toBe("../fakeDir/test/cool.md");
            });
        });
    });
    describe("Anchor", () => {
        test("should prevent anchors in resolution", () => {
            const TEST = "<p>This is a <a href=\"test/cool.md#an-anchor\"></a></p>";
            const $ = cheerio.load(TEST, { _useHtmlParser2: true });
            return (0, resolveLinks_1.default)("hello.md", resolveFileCustom, $).then(() => {
                const link = $("a");
                expect(link.attr("href")).toBe("test/cool.html#an-anchor");
            });
        });
        test("should ignore pure anchor links", () => {
            const TEST = "<p>This is a <a href=\"#an-anchor\"></a></p>";
            const $ = cheerio.load(TEST, { _useHtmlParser2: true });
            return (0, resolveLinks_1.default)("hello.md", resolveFileCustom, $).then(() => {
                const link = $("a");
                expect(link.attr("href")).toBe("#an-anchor");
            });
        });
    });
    describe("Custom Resolver", () => {
        const TEST = "<p>This is a <a href=\"/test/cool.md\"></a> <a href=\"afile.png\"></a></p>";
        test("should resolve path correctly for absolute path", () => {
            const $ = cheerio.load(TEST, { _useHtmlParser2: true });
            return (0, resolveLinks_1.default)("hello.md", resolveFileCustom, $).then(() => {
                const link = $("a").first();
                expect(link.attr("href")).toBe("test/cool.html");
            });
        });
        test("should resolve path correctly for absolute path (2)", () => {
            const $ = cheerio.load(TEST, { _useHtmlParser2: true });
            return (0, resolveLinks_1.default)("afodler/hello.md", resolveFileCustom, $).then(() => {
                const link = $("a").first();
                expect(link.attr("href")).toBe("../test/cool.html");
            });
        });
    });
    describe("External link", () => {
        const TEST = "<p>This is a <a href=\"http://www.github.com\">external link</a></p>";
        test("should have target=\"_blank\" attribute", () => {
            const $ = cheerio.load(TEST, { _useHtmlParser2: true });
            return (0, resolveLinks_1.default)("hello.md", resolveFileBasic, $).then(() => {
                const link = $("a");
                expect(link.attr("target")).toBe("_blank");
            });
        });
    });
});
