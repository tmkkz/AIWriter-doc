"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cheerio = __importStar(require("cheerio"));
const tmp_1 = __importDefault(require("tmp"));
const path_1 = __importDefault(require("path"));
const fetchRemoteImages_1 = __importDefault(require("../fetchRemoteImages"));
const URL = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/47/PNG_transparency_demonstration_1.png/280px-PNG_transparency_demonstration_1.png";
describe.skip("fetchRemoteImages", () => {
    let dir;
    beforeEach(() => {
        dir = tmp_1.default.dirSync();
    });
    test("should download image file", () => {
        const $ = cheerio.load(`<img src="${URL}" />`, { _useHtmlParser2: true });
        return (0, fetchRemoteImages_1.default)(dir.name, "index.html", $).then(() => {
            const $img = $("img");
            const src = $img.attr("src");
            expect(dir.name).toHaveFile(src);
        });
    });
    test("should download image file and replace with relative path", () => {
        const $ = cheerio.load(`<img src="${URL}" />`, { _useHtmlParser2: true });
        return (0, fetchRemoteImages_1.default)(dir.name, "test/index.html", $).then(() => {
            const $img = $("img");
            const src = $img.attr("src");
            expect(dir.name).toHaveFile(path_1.default.join("test", src));
        });
    });
});
