"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const immutable_1 = __importDefault(require("immutable"));
const cheerio = __importStar(require("cheerio"));
const glossaryEntry_1 = __importDefault(require("../../../models/glossaryEntry"));
const annotateText_1 = __importDefault(require("../annotateText"));
describe("annotateText", () => {
    const entries = immutable_1.default.List([
        new glossaryEntry_1.default({ name: "Word" }),
        new glossaryEntry_1.default({ name: "Multiple Words" }),
    ]);
    test("should annotate text", () => {
        const $ = cheerio.load("<p>This is a word, and multiple words</p>", { _useHtmlParser2: true });
        (0, annotateText_1.default)(entries, "GLOSSARY.md", $);
        const links = $("a");
        expect(links.length).toBe(2);
        const word = $(links.get(0));
        expect(word.attr("href")).toBe("/GLOSSARY.md#word");
        expect(word.text()).toBe("word");
        expect(word.hasClass("glossary-term")).toBeTruthy();
        const words = $(links.get(1));
        expect(words.attr("href")).toBe("/GLOSSARY.md#multiple-words");
        expect(words.text()).toBe("multiple words");
        expect(words.hasClass("glossary-term")).toBeTruthy();
    });
    test("should annotate text with regardless of glossary order", () => {
        const $ = cheerio.load("<p>This is multiple words, and another word.</p>", { _useHtmlParser2: true });
        (0, annotateText_1.default)(entries, "GLOSSARY.md", $);
        const links = $("a");
        expect(links.length).toBe(2);
        const word = $(links.get(0));
        expect(word.attr("href")).toBe("/GLOSSARY.md#multiple-words");
        expect(word.text()).toBe("multiple words");
        expect(word.hasClass("glossary-term")).toBeTruthy();
        const words = $(links.get(1));
        expect(words.attr("href")).toBe("/GLOSSARY.md#word");
        expect(words.text()).toBe("word");
        expect(words.hasClass("glossary-term")).toBeTruthy();
    });
    test("should not annotate scripts", () => {
        const $ = cheerio.load("<script>This is a word, and multiple words</script>", { _useHtmlParser2: true });
        (0, annotateText_1.default)(entries, "GLOSSARY.md", $);
        expect($("a").length).toBe(0);
    });
    test('should not annotate when has class "no-glossary"', () => {
        const $ = cheerio.load('<p class="no-glossary">This is a word, and multiple words</p>', { _useHtmlParser2: true });
        (0, annotateText_1.default)(entries, "GLOSSARY.md", $);
        expect($("a").length).toBe(0);
    });
});
